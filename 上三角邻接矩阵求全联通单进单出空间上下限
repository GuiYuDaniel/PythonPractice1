#
#
#
#
#
#
#
#
# 目前严格的表达式无法给出
# 不过可以给出较好的上下限，特别是上限很接近表达式
#
# 输入：nuerons(整数)，kindsofnuerons(整数)
# 执行：getspace(nuerons,kindsofnuerons)
# 输出：space(整数)                                                  ，当nuerons预算过
#      upperlimit(整数)，lowerlimit(整数)，upperlimit/lowerlimit(浮点)，当nuerons没算过


import itertools

class Calculate(object):
    #def __init__(self, x):
        #self.x = x

    def upper(self,n): # 计算无f上限
        # 计算当前分层部分的空间（当前分层是一个list）
        def pairspace(_deplist):
            _result = 1
            _lenth = len(_deplist)
            for i in range(_lenth - 1):  # [0,1,2,...,lenth-2]
                # 对i行执行-1操作，对0～i-1执行*操作
                _a = (2 ** _deplist[i] - 1) ** _deplist[i + 1]
                _result *= _a
                if i != 0:
                    for j in range(i):
                        _a = (2 ** _deplist[j]) ** _deplist[i + 1]
                        _result *= _a
            return _result

        # 由n造全分层，对每个分层使用pairspace（注：这里全分层首末层必须为1个）
        _result = 0
        _cutnnumber = list(range(1, n - 2))  # [1,2,...,n-2]是被切粒子编号，[1,2,...,n-3]是粒子后侧刀口编号
        for i in range(n - 2):  # list(range(n-2))是切几刀的总列表
            if i == 0:
                _setNi = [1, n - 2, 1]
                _a = pairspace(_setNi)
                _result += _a
            else:
                for j in itertools.combinations(_cutnnumber, i):
                    # 现在，i是切几刀，j是刀口位置的list
                    _setNi = [1]
                    _N2 = j[0]
                    _setNi.append(_N2)
                    if i > 1:
                        _Nother = [j[m] - j[m - 1] for m in range(1, i)]
                        _setNi = _setNi + _Nother
                    _Nm_1 = (n - 2) - j[i - 1]
                    _setNi.append(_Nm_1)
                    _Nm = 1
                    _setNi.append(_Nm)
                    _a = pairspace(_setNi)
                    _result += _a
        return _result

    def lower(self,n): # 计算无f下限(add n*[121111...])

        def pairspace(_deplist):
            _result = 1
            _lenth = len(_deplist)
            for i in range(_lenth - 1):  # [0,1,2,...,lenth-2]
                # 对i行执行-1操作，对0～i-1执行*操作
                _a = (2 ** _deplist[i] - 1) ** _deplist[i + 1]
                _result *= _a
                if i != 0:
                    for j in range(i):
                        _a = (2 ** _deplist[j]) ** _deplist[i + 1]
                        _result *= _a
            return _result

        _lower1=2**((n-1)*(n-2)/2) # 看似前一级邻接矩阵全空间（有值+无值），实际上也是n个点每个点一层图的有值空间
        _setNi=[1]*(n-1)
        _setNi[1]=2
        _lower2=(n-3)*pairspace(_setNi) # 全部形如[12111...1]的空间
        _lower=_lower1+_lower2
        return int(_lower)

    def fupper(self,upper,f,n): # 计算有f上限
        _fupper=(f**(n-2)) * upper
        return _fupper

    def flower(self,lower,f,n): # 计算有f下限
        _flower=(f**(n-2)) * lower
        return _flower

def getspace(nuerons,kindsofnuerons):
    '''
    output exact space when n have been cal ;
    output upper & lower limit when n not .
    '''
    # 外部参数（可改）
    n=nuerons # 神经元数目（包括input和output点），邻接矩阵维度（包括input和output点）
    f=kindsofnuerons # 神经元种类，每个点填什么的总数（例如可以填sin，cos，log，则f=3）
    #goodn=[2,3,4,5,6,7]
    goodn=[2,3,4,5,6,7]
    goodspace={2:1,3:2,4:10,5:122,6:3346,7:196082} # 已经计算过的严格有值空间{n:n个点空间大小}
    #
    if n in goodn:
        result=(f**(n-2)) * goodspace[n]
        print('space=',result)
        return result
    else:
        upper=Calculate.upper(Calculate,n)
        lower=Calculate.lower(Calculate,n)
        upperlimit=Calculate.fupper(Calculate,upper,f,n)
        lowerlimit=Calculate.flower(Calculate,lower,f,n)
        print('upper=',"%E" % upperlimit,'lower=','%E' % lowerlimit,'upper/lower=','%10.2f' % (upperlimit/lowerlimit))
        return upperlimit,lowerlimit,upperlimit/lowerlimit

#getspace(10,7)
